// src/utils/color.ts
import * as color from "kolorist";
var colorString = (s) => color.green(`'${s}'`);
var colorKeyword = (s) => color.blue(`${s}`);
var colorJson = (s) => color.green(JSON.stringify(s));
var colorStringArray = (a) => `[ ${a.map(colorString).join(", ")} ]`;
var colorNumber = (n) => color.yellow(`${n}`);
var colorBoolean = (b) => color.yellow(b ? "true" : "false");
var colorDate = (d) => color.magenta(d.toISOString());

// src/prettifier.ts
import * as color3 from "kolorist";
import { EOL as EOL2 } from "os";
import prettifier from "pino-pretty";

// src/utils/error.ts
var isObject = (maybeObject) => typeof maybeObject === "object" && maybeObject !== null;
var isSerializedError = (maybeError) => {
  return isObject(maybeError) && !!maybeError["message"];
};
var serializeError = (message) => {
  const raw = new Error(String(message));
  return {
    type: "Error",
    message: String(message),
    stack: String(raw.stack),
    raw
  };
};

// src/utils/format.ts
import * as color2 from "kolorist";

// src/config/static.ts
var { OS_HOSTNAME } = process.env;
var LOG_LEVEL_LABEL = {
  [10 /* TRACE */]: "trace",
  [20 /* DEBUG */]: "debug",
  [30 /* INFO */]: " info",
  [40 /* WARN */]: " warn",
  [50 /* ERROR */]: "error",
  [60 /* FATAL */]: "fatal"
};

// src/utils/format.ts
import { EOL } from "os";
var CWD = process.cwd();
var CWD_REGEX = new RegExp(CWD, "g");
var colorForLevel = (level) => {
  switch (level) {
    case 10 /* TRACE */:
      return color2.gray;
    case 20 /* DEBUG */:
      return color2.cyan;
    case 30 /* INFO */:
      return color2.green;
    case 40 /* WARN */:
      return color2.yellow;
    case 50 /* ERROR */:
      return (...args) => color2.bold(color2.red(...args));
    case 60 /* FATAL */:
      return (...args) => color2.bold(color2.bgRed(...args));
    default:
      return color2.white;
  }
};
var colorMsgForLevel = (level) => {
  switch (level) {
    case 10 /* TRACE */:
      return color2.gray;
    case 20 /* DEBUG */:
      return color2.white;
    case 30 /* INFO */:
      return color2.white;
    case 40 /* WARN */:
      return color2.yellow;
    case 50 /* ERROR */:
      return (...args) => color2.bold(color2.red(...args));
    case 60 /* FATAL */:
      return (...args) => color2.bold(color2.bgRed(...args));
    default:
      return color2.white;
  }
};
var formatLevel = (level) => colorForLevel(level)(LOG_LEVEL_LABEL[level]);
var formatProcessId = (pid) => color2.magenta(`*${pid}`);
var formatHostname = (hostname) => color2.gray(`@${hostname}`);
var formatSessionId = (id) => color2.magenta(`%${id}`);
var formatRequestId = (id) => color2.magenta(`#${id}`);
var formatPlugin = (plugin) => color2.gray(`(${plugin})`);
var formatErrorStack = (stack) => color2.gray(stack.replace(CWD_REGEX, ".").split(EOL).slice(1).join(EOL));
var formatError = (error, level) => {
  const { statusCode = 500, type = error["name"], stack = `${EOL}    at ???` } = error;
  const supportsArt = color2.options.supportLevel === 2;
  const icon = supportsArt ? "\xD7" : "x";
  const isInternalError = !statusCode || statusCode >= 500;
  const output = [color2[isInternalError ? "red" : "yellow"](`${icon}${type} `), color2.magenta(statusCode)];
  if (isInternalError) {
    output.push(colorForLevel(level)(`: ${error.message}`), EOL, formatErrorStack(stack));
  } else {
    output.push(`: ${error.message}`);
  }
  return output.join("");
};

// src/prettifier.ts
var defaultOptions = {
  ignore: "pid,hostname",
  colorize: color3.options.enabled,
  errorLikeObjectKeys: ["error", "err"],
  singleLine: true,
  hideObject: true,
  translateTime: "yyyy-mm-dd'T'HH:MM:sso"
};
var prettifyTime = (inputData) => color3.gray(String(inputData));
var build = (options3) => {
  const {
    errorLikeObjectKeys = defaultOptions.errorLikeObjectKeys,
    ignore = defaultOptions.ignore,
    colorize = defaultOptions.colorize
  } = options3;
  const ignoredKeys = ignore.split(",");
  if (colorize && !color3.options.enabled) {
    color3.options.enabled = true;
    color3.options.supportLevel = 2;
  }
  const messageFormat = (log, messageKey, _leveLabel) => {
    const { level, time, msg, reqId, sessionId, plugin, silent, ...otherProps } = log;
    if (silent) {
      return "";
    }
    const output = [];
    if (!ignoredKeys.includes("reqId") && reqId) {
      output.push(formatRequestId(reqId), " ");
    }
    if (!ignoredKeys.includes("sessionId") && sessionId) {
      output.push(formatSessionId(sessionId), " ");
    }
    const firstErrorKey = errorLikeObjectKeys.find((key) => log[key]);
    const formattedMsg = colorMsgForLevel(level)(String(log[messageKey]));
    if (firstErrorKey) {
      const error = log[firstErrorKey];
      const serializedError = isSerializedError(error) ? error : serializeError(error);
      output.push(formattedMsg, EOL2, " ", formatError(serializedError, level), EOL2);
    } else {
      output.push(formattedMsg);
    }
    if (!ignoredKeys.includes("plugin") && plugin) {
      output.push(" ", formatPlugin(plugin));
    }
    const outputProps = Object.keys(otherProps).reduce((soFar, key) => {
      if (errorLikeObjectKeys.includes(key) || ignoredKeys.includes(key)) {
        return soFar;
      }
      soFar[key] = otherProps[key];
      return soFar;
    }, {});
    if (Object.keys(outputProps).length > 0) {
      output.push(" ", colorJson(outputProps));
    }
    return output.concat(EOL2).join("");
  };
  return prettifier({
    ...defaultOptions,
    customPrettifiers: {
      time: prettifyTime,
      level: formatLevel,
      hostname: formatHostname,
      pid: formatProcessId
    },
    messageFormat,
    ...options3,
    colorize: false
  });
};

// src/index.ts
var src_default = build;
export {
  colorBoolean,
  colorDate,
  colorJson,
  colorKeyword,
  colorNumber,
  colorString,
  colorStringArray,
  src_default as default
};
//# sourceMappingURL=index.js.map