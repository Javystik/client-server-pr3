{"version":3,"sources":["../../src/bin/cli.ts","../../src/prettifier.ts","../../src/utils/color.ts","../../src/utils/error.ts","../../src/utils/format.ts","../../src/config/static.ts"],"sourcesContent":["#!/usr/bin/env ts-node\n\nimport { pipeline } from \"node:stream/promises\";\nimport { build } from \"../prettifier\";\n\nconst stream = build({});\n\nconst main = async () => {\n  await pipeline(process.stdin, stream);\n};\n\nmain();\n","import * as color from \"kolorist\";\nimport { EOL } from \"os\";\nimport type { LogDescriptor } from \"pino\";\nimport type PinoPretty from \"pino-pretty\";\nimport prettifier from \"pino-pretty\";\nimport type { SerializedError } from \"pino-std-serializers\";\nimport type { LOG_LEVEL } from \"./config\";\nimport {\n  colorJson,\n  colorMsgForLevel,\n  formatError,\n  formatHostname,\n  formatLevel,\n  formatPlugin,\n  formatProcessId,\n  formatRequestId,\n  formatSessionId,\n  isSerializedError,\n  serializeError,\n} from \"./utils\";\n\nexport interface LogObject extends LogDescriptor {\n  level: LOG_LEVEL;\n  time: number;\n  msg: string;\n  pid: number;\n  hostname: string;\n  reqId?: string | number;\n  sessionId?: string | number;\n  plugin?: string;\n  silent?: boolean;\n  [s: string]: unknown;\n}\n\nconst defaultOptions /*: PinoPretty.PrettyOptions*/ = {\n  ignore: \"pid,hostname\",\n  colorize: color.options.enabled,\n  errorLikeObjectKeys: [\"error\", \"err\"],\n  singleLine: true,\n  hideObject: true,\n  translateTime: \"yyyy-mm-dd'T'HH:MM:sso\",\n};\n\nconst prettifyTime: PinoPretty.Prettifier = (inputData) => color.gray(String(inputData));\n\nexport const build = (options: PinoPretty.PrettyOptions) => {\n  const {\n    errorLikeObjectKeys = defaultOptions.errorLikeObjectKeys,\n    ignore = defaultOptions.ignore,\n    colorize = defaultOptions.colorize,\n  } = options;\n  const ignoredKeys = ignore.split(\",\");\n\n  // Force colorize\n  if (colorize && !color.options.enabled) {\n    color.options.enabled = true;\n    color.options.supportLevel = 2; /* SupportLevel.ansi256 */\n  }\n\n  const messageFormat: PinoPretty.MessageFormatFunc = (log, messageKey, _leveLabel) => {\n    const { level, time, msg, reqId, sessionId, plugin, silent, ...otherProps } = log as LogObject;\n    if (silent) {\n      return \"\";\n    }\n    const output = [];\n    // Fastify request id\n    if (!ignoredKeys.includes(\"reqId\") && reqId) {\n      output.push(formatRequestId(reqId), \" \");\n    }\n    // Fastify session id\n    if (!ignoredKeys.includes(\"sessionId\") && sessionId) {\n      output.push(formatSessionId(sessionId), \" \");\n    }\n    // Message or error\n    const firstErrorKey = errorLikeObjectKeys.find((key) => log[key]);\n    const formattedMsg = colorMsgForLevel(level)(String(log[messageKey]));\n    if (firstErrorKey) {\n      const error = log[firstErrorKey];\n      const serializedError: SerializedError = isSerializedError(error) ? error : serializeError(error);\n      output.push(formattedMsg, EOL, \" \", formatError(serializedError, level), EOL);\n    } else {\n      output.push(formattedMsg);\n    }\n    // Fastify plugin name\n    if (!ignoredKeys.includes(\"plugin\") && plugin) {\n      output.push(\" \", formatPlugin(plugin));\n    }\n    // Other props\n    const outputProps = Object.keys(otherProps).reduce<Record<string, unknown>>((soFar, key) => {\n      if (errorLikeObjectKeys.includes(key) || ignoredKeys.includes(key)) {\n        return soFar;\n      }\n      soFar[key] = otherProps[key];\n      return soFar;\n    }, {});\n    if (Object.keys(outputProps).length > 0) {\n      output.push(\" \", colorJson(outputProps));\n    }\n    return output.concat(EOL).join(\"\");\n  };\n\n  return prettifier({\n    ...defaultOptions,\n    customPrettifiers: {\n      time: prettifyTime,\n      level: formatLevel as unknown as PinoPretty.Prettifier,\n      hostname: formatHostname as unknown as PinoPretty.Prettifier,\n      pid: formatProcessId as unknown as PinoPretty.Prettifier,\n    },\n    messageFormat,\n    ...options,\n    colorize: false,\n  });\n};\n","import * as color from \"kolorist\";\n\nexport const colorString = (s: unknown): string => color.green(`'${s}'`);\nexport const colorKeyword = (s: unknown): string => color.blue(`${s}`);\nexport const colorJson = (s: unknown): string => color.green(JSON.stringify(s));\nexport const colorStringArray = (a: Array<unknown>): string => `[ ${a.map(colorString).join(\", \")} ]`;\nexport const colorNumber = (n: unknown): string => color.yellow(`${n}`);\nexport const colorBoolean = (b: unknown): string => color.yellow(b ? \"true\" : \"false\");\nexport const colorDate = (d: Date): string => color.magenta(d.toISOString());\n","import type { SerializedError } from \"pino-std-serializers\";\n\nexport const isObject = (maybeObject: unknown): maybeObject is Record<string, unknown> =>\n  typeof maybeObject === \"object\" && maybeObject !== null;\n\nexport const isSerializedError = (maybeError: unknown): maybeError is SerializedError => {\n  return isObject(maybeError) && !!maybeError[\"message\"];\n};\n\nexport const serializeError = (message: unknown): SerializedError => {\n  const raw = new Error(String(message));\n  return {\n    type: \"Error\",\n    message: String(message),\n    stack: String(raw.stack),\n    raw,\n  };\n};\n","import * as color from \"kolorist\";\nimport type { SerializedError } from \"pino\";\nimport { LOG_LEVEL, LOG_LEVEL_LABEL } from \"../config\";\n\nconst CWD = process.cwd();\nconst CWD_REGEX = new RegExp(CWD, \"g\");\n\nexport const colorForLevel = (level: number) => {\n  switch (level) {\n    case LOG_LEVEL.TRACE:\n      return color.gray;\n    case LOG_LEVEL.DEBUG:\n      return color.cyan;\n    case LOG_LEVEL.INFO:\n      return color.green;\n    case LOG_LEVEL.WARN:\n      return color.yellow;\n    case LOG_LEVEL.ERROR:\n      return (...args: Parameters<typeof color.bold>) => color.bold(color.red(...args));\n    case LOG_LEVEL.FATAL:\n      return (...args: Parameters<typeof color.bold>) => color.bold(color.bgRed(...args));\n    default:\n      return color.white;\n  }\n};\nexport const colorMsgForLevel = (level: number) => {\n  switch (level) {\n    case LOG_LEVEL.TRACE:\n      return color.gray;\n    case LOG_LEVEL.DEBUG:\n      return color.white;\n    case LOG_LEVEL.INFO:\n      return color.white;\n    case LOG_LEVEL.WARN:\n      return color.yellow;\n    case LOG_LEVEL.ERROR:\n      return (...args: Parameters<typeof color.bold>) => color.bold(color.red(...args));\n    case LOG_LEVEL.FATAL:\n      return (...args: Parameters<typeof color.bold>) => color.bold(color.bgRed(...args));\n    default:\n      return color.white;\n  }\n};\n\nimport { EOL } from \"os\";\nexport const formatTime = (time: number): string => new Date(time).toISOString();\nexport const colorizeTime = (time: string): string => color.gray(time);\nexport const formatLevel = (level: LOG_LEVEL): string => colorForLevel(level)(LOG_LEVEL_LABEL[level]);\nexport const formatProcessId = (pid: number): string => color.magenta(`*${pid}`);\nexport const formatHostname = (hostname: string | number): string => color.gray(`@${hostname}`);\nexport const formatSessionId = (id: string | number): string => color.magenta(`%${id}`);\nexport const formatRequestId = (id: string | number): string => color.magenta(`#${id}`);\nexport const formatPlugin = (plugin: string): string => color.gray(`(${plugin})`);\nexport const formatErrorStack = (stack: string): string =>\n  color.gray(stack.replace(CWD_REGEX, \".\").split(EOL).slice(1).join(EOL));\n\nexport const formatError = (error: SerializedError, level: LOG_LEVEL): string => {\n  const { statusCode = 500, type = error[\"name\"], stack = `${EOL}    at ???` } = error;\n  const supportsArt = color.options.supportLevel === 2; /* SupportLevel.ansi256 */\n  const icon = supportsArt ? \"Ã—\" : \"x\";\n\n  const isInternalError = !statusCode || statusCode >= 500;\n  const output = [color[isInternalError ? \"red\" : \"yellow\"](`${icon}${type} `), color.magenta(statusCode)];\n\n  if (isInternalError) {\n    output.push(colorForLevel(level)(`: ${error.message}`), EOL, formatErrorStack(stack));\n  } else {\n    output.push(`: ${error.message}`);\n  }\n  return output.join(\"\");\n};\n","export const { OS_HOSTNAME } = process.env;\n\nexport enum LOG_LEVEL {\n  TRACE = 10,\n  DEBUG = 20,\n  INFO = 30,\n  WARN = 40,\n  ERROR = 50,\n  FATAL = 60,\n}\n\nexport const LOG_LEVEL_LABEL: Record<LOG_LEVEL, string> = {\n  [LOG_LEVEL.TRACE]: \"trace\",\n  [LOG_LEVEL.DEBUG]: \"debug\",\n  [LOG_LEVEL.INFO]: \" info\",\n  [LOG_LEVEL.WARN]: \" warn\",\n  [LOG_LEVEL.ERROR]: \"error\",\n  [LOG_LEVEL.FATAL]: \"fatal\",\n};\n"],"mappings":"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","names":["color","EOL","color","color","options","EOL"]}